{"Name":"XCardView","Id":1531,"Alias":"XCardView","Description":"\nAbout XCardView\n======================\n\n`XCardView` displays its views as a stack of cards. Cards can be swiped off physically by the user or programmatically from code.\n\n`XCardView` wraps a native third-party library in a Xamarin binding library that targets the new **Unified API**.\n\nLoading Cards\n=============\n\nThe `ICardViewDataSource` interface defines a `NextViewForCardView` method that returns a view for the next card.\n\nAn `XCardView` appears like a stack of cards being viewed from the top. Edges of the lower cards are visible underneath the top card. `XCardView` will prefetch three views in advance to animate them. A new card is fetched every time a card is swiped.\n\nEvents\n======\n\nAn `XCardView` has the following events:\n\n- DidSwipeLeft\n\n- DidSwipeRight\n\n- DidCancelSwipe\n\n- DidStartSwipingCardAtLocation\n\n- SwipingCardAtLocation\n\n- DidEndSwipingCard\n\n***\n\nXCardView wraps Zhixuan Laiâ€™s _ZLSwipeableView_ in a Xamarin binding library.","Version":"1.1","Summary":"A simple view for building card-like interfaces like Tinder and Potluck.","QuickStart":"\nYou can add an `XCardView` as shown in the following example.\n\n#Example\nYour `XCardView` must have an object that implements the `ICardViewDataSource` to act as a data source for cards.\n\nYou must assign set the `DataSource` property of your `XCardView` in your view controller\u0027s `ViewDidLayoutSubviews` method.\n\n###View Controller\n```\nusing Softweb.Xamarin.Controls.iOS;\n\npublic class DemoViewController : UIViewController, ICardViewDataSource\n{\n\tprivate static readonly Random random = new Random();\n\t\n    //Returns a random byte\n\tprivate Func\u003cbyte\u003e r = () =\u003e (Guid.NewGuid()).ToByteArray() [random.Next(0, 15)];\n\t\n\tpublic CardView DemoCardView { get; set; }\n\n\tpublic override void ViewDidLoad()\n\t{\n\t\tbase.ViewDidLoad();\n\t\tView.BackgroundColor = UIColor.White;\n\n\t\tDemoCardView = new CardView();\n\n\t\t//Wire up events\n\t\tDemoCardView.DidSwipeLeft += OnSwipe;\n\t\tDemoCardView.DidSwipeRight += OnSwipe;\n\t\tDemoCardView.DidCancelSwipe += OnSwipeCancelled;\n\t\tDemoCardView.DidStartSwipingCardAtLocation += OnSwipeStarted;\n\t\tDemoCardView.SwipingCardAtLocation += OnSwiping;\n\t\tDemoCardView.DidEndSwipingCard += OnSwipeEnded;\n\t}\n\n\tpublic override void ViewWillLayoutSubviews()\n\t{\n\t\tbase.ViewWillLayoutSubviews();\n\t\tDemoCardView.Center = new CGPoint (View.Center.X, View.Center.Y - 10f);\n\t\tDemoCardView.Bounds = new CGRect (0f, 0f, View.Bounds.Width - 20f, View.Bounds.Height - 100f);\n\t\tView.AddSubview(DemoCardView);\n\t}\n\n\tpublic override void ViewDidLayoutSubviews()\n\t{\n\t\tbase.ViewDidLayoutSubviews();\n\t\tDemoCardView.DataSource = this;\n\t}\n\n\tpublic UIView NextCardForCardView(CardView cardView)\n\t{\n\t\t//Create a card with a random background color\n\t\tvar card = new UIView {\n\t\t\tBackgroundColor = UIColor.FromRGBA(r(), r(), r()),\n\t\t\tFrame = DemoCardView.Bounds\n\t\t};\n\t\t\n\t\t//Rasterize card for more efficient animation\n\t\tcard.Layer.ShouldRasterize = true;\n\t\t\n\t\treturn card;\n\t}\t\n\n\tvoid OnSwipe(object sender, SwipeEventArgs e)\n\t{\n\t\tConsole.WriteLine(\"View swiped.\\n\");\n\t}\n\n\tvoid OnSwipeCancelled(object sender, SwipeEventArgs e)\n\t{\n\t\tConsole.WriteLine(\"Swipe cancelled.\\n\");\n\t}\n\n\tvoid OnSwipeStarted(object sender, SwipingStartedEventArgs e)\n\t{\n\t\tConsole.Write(\"Started swiping at location {0}\\n\", e.Location);\n\t}\n\n\tvoid OnSwiping(object sender, SwipingEventArgs e)\n\t{\n    \tConsole.Write(\"Swiping at location {0}\\n\", e.Location);\n\t}\n\n\tvoid OnSwipeEnded(object sender, SwipingEndedEventArgs e)\n\t{\n\t\tConsole.Write(\"Ended swiping at location {0}\\n\", e.Location);\n\t}\n}\n```","Hash":"c578652678e2783c4879e5e43d35137d","TargetPlatforms":["ios"],"TrialHash":null}