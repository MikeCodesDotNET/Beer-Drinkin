{"Name":"SQLCipher iOS","Id":1922,"Alias":"sqlcipher-for-xamarin-ios","Description":"[SQLCipher](https://www.zetetic.net/sqlcipher/) provides transparent and secure 256-bit AES encryption of SQLite database files using established [security practices](https://www.zetetic.net/sqlcipher/design/). SQLCipher is a popular and widely deployed platform, used daily in many commercial and open source applications.\n\n### Strong Security for Mobile and Embedded Databases\n\n**No special knowledge of security or cryptography required!** Use a standard ADO.NET or sqlite-net compatible API while SQLCipher takes care of data security behind the scenes.\n\nSQLCipher has a small footprint and great performance so it\u0027s ideal for protecting embedded application databases and is well suited for mobile development. Key features included:\n\n1. Optimized for Xamarin\n2. Same API on iOS and Android\n3. Simple configuration\n4. 100% of database is encrypted\n5. ADO.NET and sqlite-net compatible APIs\n6. Low overhead encryption, often as low as 5-15%\n7. High performance with indexes and transactions\n8. Starts up and closes down quickly\n9. Works well on large databases\n10. Interoperability with SQLCipher on other platforms\n\nLicenses include 1 year of CipherCare, providing prioritized and confidential email support directly from the SQLCipher development team.\n","Version":"3.3.1.0","Summary":"Full database encryption using 256-bit AES.","QuickStart":"##Getting Started with SQLCipher \n\n### Prerequisite\n\nStart by installing the SQLCipher component and verifying Mono.Data.Sqlcipher.dll is listed as project assembly reference.\n\nSQLCipher for Xamarin provides two popular APIs options for interacting with an encrypted database:\n\n1. Mono.Data.Sqlcipher - Compatible with the [Mono.Data.Sqlite provider](http://docs.xamarin.com/guides/ios/advanced_topics/system.data) API.\n\n2. SQLite - Compatible with the popular [sqlite-net project](https://github.com/praeclarum/sqlite-net) API.\n\n_Tip: Before converting a project to use SQLCipher, remove any existing assembly references to Mono.Data.Sqlite, sqlite-net, or sqlite-net source code (i.e. SQLite.c)._\n\n### Upgrade Notice\n\nWith the release of SQLCipher 3.0.0, the default key derivation iteration length has increase from 4,000 to 64,000, which provides a significantly increased level of security. Note however, by default, *SQLCipher 3 will not open old version 2 databases*.\n\nWe generally recommend that you upgrade any database files using the SQLCipher 2 file format. Provided that default SQLCipher configurations were used, execute the following command once the connection has been created:\n\n    PRAGMA cipher_migrate;\n    \nA result code of 0 indicates the upgrade was successful.  This upgrade only needs to be run once per database.  \n\n*Please read the [release notes](https://www.zetetic.net/blog/2013/11/11/sqlcipher-300-release.html) for details on backwards compatibility and performance before upgrading!*\n\n### sqlite-net\n\n    using SQLite;\n    \n    ...\n\n    public class Model\n    {\n      [PrimaryKey,AutoIncrement]\n      public int Id { get; set; }\n      public string Content { get; set; }\n    }\n    \n    ...\n    \n    using(var conn = new SQLiteConnection (FilePath, Password))\n    {\n      conn.CreateTable\u003cModel\u003e();\n    \n      conn.InsertOrReplace( \n        new Model() {Id = 0, Content = content});\n    \n      var models = conn.Query\u003cModel\u003e (\n        \"SELECT * FROM Model WHERE Id = ?\", 0);\n    }\n\n### Mono.Data.Sqlcipher\n\n    using Mono.Data.Sqlcipher;\n\n    ...\n\n    using(var conn = new SqliteConnection(string.Format(\"Data Source={0}\", FilePath)))\n    {\n      conn.SetPassword(Password);\n      conn.Open(); \n      using (var cmd = conn.CreateCommand())\n      {\n        cmd.CommandText = “CREATE TABLE Model(“ +\n          “Id INTEGER PRIMARY KEY AUTOINCREMENT, Content TEXT)\";\n        cmd.ExecuteNonQuery();\n    \n        cmd.CommandText = \n          \"INSERT INTO Model (Content) VALUES (@content)\";\n        var p = cmd.CreateParameter();\n        p.ParameterName = \"@content\";\n        p.Value = content;\n        cmd.Parameters.Add(p);\n    \n        cmd.CommandText = \n          “SELECT * FROM Model Where Id = 0\";\n        var reader = command.ExecuteReader ();\n        while (reader.Read()) {\n          // process results\n        }\n      }\n    }\n\n","Hash":"1aeb10ed6ea1378fa9e5c9be160e0302","TargetPlatforms":["ios"],"TrialHash":"e9faab8e39aa2c6f8f77c37192910067"}