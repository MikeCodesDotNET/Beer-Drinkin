{"Name":"JudoPay Xamarin SDK","Id":2416,"Alias":"judopay-xamarin-sdk","Description":"\nThe judoPay library lets you integrate card payments into your Xamarin project. It is built to be mobile first with ease of integration in mind. Judo\u0027s SDK enables a faster, simpler and more secure payment experience within your app. Build trust and user loyalty in your app with our secure and intuitive UX.\n\n# Features\n\n- **Simplicity** - Our simple integration process means you can have more time to develop your project and leave the intricacy of payments to us..\n- **Security** - Use our out-of-the-box UI to enjoy in-built PCI Level 1 compliance, so all your transactions are handled in the safest hands.\n- **Flexibility** - Integrate with our full suite of payment API\u0027s for complete control of your application UX. \n\n# Learn more\n\nLearn more about judo by visiting [judopay.com](https://www.judopay.com/xamarin?utm_source=xamarin\u0026utm_medium=partnership%20inbound%20links\u0026utm_term=xamarin%20components%20%2D%20learn%20more%20link\u0026utm_content=partnerships\u0026utm_campaign=xamarin%20components%20%2D%20learn%20more%20link)\n\nOr take a look at the code yourself [Github](https://github.com/JudoPay/Judo-Xamarin)\n\n# Release \n\nVersion 2.3.0\n\n- Judo API version 5.0\n- SHA 256 SSL/TLS Certificate upgrade - an industry-wide security update to protect you against man-in-the-middle attacks\n- Improved error handling\n- Bug fixes\n- Fraud prevention features","Version":"2.3.0","Summary":"A Xamarin SDK for JudoPay service","QuickStart":"# Getting started\n\nReady to start integrating? This tutorial will help you get started with integrating judo with your Xamarin Mobile Application.\n\n### Step 1 \n\nYou can create your judo account by clicking “Get Started” here: [https://www.judopay.com/docs/](https://www.judopay.com/docs/)\n\n### Step 2 \n\nOnce registered, you will receive an email providing you with temporary login details and will be asked to reset your password to a memorable, strong password. Once logged in, you\u0027ll be able to download our SDKs, access development tools, run test transactions in our Sandbox environment and be able to add and administer your first App by following the on-screen steps.\n\n### Step 3 \n\nTo start using the judoPay library you\u0027ll first need to configure your SDK to set your API credentials, which are used to authenticate your access with judo.\n\nYou can do this with the following code:\n\n### Configuring judoPay APIs\nAdd the following code snippet to your project upon start up or before making your transaction call.\nThis is best done within the AppDelegates FinishedLaunching method (iOS) or within the apps initial activity\u0027s OnCreate() method (Android).\nSpecifying your ApiToken, ApiSecret and Judo ID which you can find in the Dashboard (this code snippet is configured to operate in Sandbox environment. \n\n``` csharp\nvar configInstance = JudoConfiguration.Instance;\n\n\t//setting for SandBox\n\tconfigInstance.Environment = JudoEnvironment.Sandbox;\n\n\tconfigInstance.ApiToken =  \"{ApiToken}\";\n\tconfigInstance.ApiSecret = \"{ApiSecret}\";\n\tconfigInstance.JudoId =    \"{JudoID}\";\n\n \n    // setting up 3d secure, AVS, Amex and maestro card support\n    Judo.Instance.AVSEnabled = true;\n    Judo.Instance.AmExAccepted = true;\n    Judo.Instance.MaestroAccepted = true;\n            \n    // this will turn on UI mode which will hand over control to our out of \n    //the box UI solution\n    Judo.UIMode = true;\n            \n```\n\n**Please note:** You can configure judoPay library to use live environment by changing JudoConfiguration.Instance.Environment from `JudoEnvironment.Sandbox` to `JudoEnvironment.live`\n\n\n### Card payment\n\nNow that you\u0027ve configured your SDK with your API Tokens and Secrets, you\u0027re ready to use the Judo instance to process payments. \n\nBy calling the following with the SDK Manager, you\u0027ll invoke judo\u0027s UI to enter card data and submit the payment request:\n\n#####iOS\n```csharp\n//Define a success block\nprivate void SuccessPayment(PaymentReceiptModel receipt)\n     {\n     // handle receipt\n     }\n//Define a Failure block\nprivate void FailurePayment(JudoError error, PaymentReceiptModel receipt)\n     {\n     // handle errors or Declined cards\n     }\n\n//Pass through the payment you would like to facilitate\nvar paymentViewModel = new PaymentViewModel\n     {\n      Amount = 4.5m, \n      ConsumerReference = consumerRef,\n      PaymentReference = paymentReference,\n      Currency = \"GBP\",\n      Card = new CardViewModel()\n     };\n\n//Let Judo do the rest\n\n///iOS\nJudo.Instance.Payment(paymentViewModel, successCallback, failureCallback);\n\n///Android\nvar context = [Your current Android activity context]\nJudo.Instance.Payment(paymentViewModel, successCallback,failureCallback,context);\n \n\n```\n####Note: \nThis callback should be non-blocking\n\n### PreAuthorise card\n\nYou can PreAuthorise an amount on a consumer\u0027s card with our SDK in order to settle in the future. You can invoke this method, with the below:\n\n```csharp\n///iOS\nJudo.Instance.PreAuth(paymentViewModel, successCallback, failureCallback);\n\n///Android\nJudo.Instance.PreAuth(paymentViewModel, successCallback,failureCallback,context);\n\n//set the amount to the amount of money you wish to preAuthorise the card against\n// your code ...\n```\n\n### Register card\n\nYou can register a consumer\u0027s card with our SDK in order to process future payments. You can invoke this method, with the below:\n\n\n```csharp\n//iOS\nJudo.Instance.RegisterCard(paymentViewModel, successCallback, failureCallback);\n\n///Android\nJudo.Instance.RegisterCard(paymentViewModel, successCallback, failureCallback,context);\n\n//set amount in paymentViewModel to 0.00, no money should be charged through card Registration\n// your code ...\n```\n\n\nWhen you\u0027ve successfully processed this call, judo\u0027s API will return a Consumer Token and a Card Token, which can be stored and used to process future payments with the **Token payment** method.\n\n### Token payment\n\nA Token payment allows you to process future payments on behalf of a consumer without you having to store sensitive card data - this means you don\u0027t have to worry about PCI compliance. You can initiate a Token payment with the below:\n\n```csharp\n///iOS\nJudo.Instance.TokenPayment(tokenPayment, successCallback, failureCallback);\n\n///Android\nJudo.Instance.TokenPayment(tokenPayment, successCallback, failureCallback,context);\n\n// your code ...\n```\n\n### 3D Secure\n\nThe iOS Implementation supports 3D Secure Validation on payment,PreAuthorisation and Registering a card. This applies to UI Mode Only.\n\n\n### Apple Pay\n\nThe iOS Implementation supports Apple Pay on payments and PreAuthorisations.\n\nTo integrate ApplePay with your app, you must set it up at the Judo Account level ([guide here](https://www.judopay.com/docs/v4_6/apple-pay/quickstart/)), as well as make some changes to your applications settings.\n\nAdd this block of code in your applications Entitlements.Plist:\n```\n\u003cdict\u003e\n\u003ckey\u003ecom.apple.developer.in-app-payments\u003c/key\u003e \n\u003carray\u003e \n\u003cstring\u003eINSERT-MERCHANT-NAME-HERE\u003c/string\u003e \n\u003c/array\u003e\n\u003c/dict\u003e\n```\n\nAfter you are all set up making an Apple Pay transaction is just as easy as before\n\n#### Payment\n\nApplePay\n```\n\n//Construct the viewModel\nvar summaryItems = new PKPaymentSummaryItem[] {\n\t\t\t\tnew PKPaymentSummaryItem () {\n\t\t\t\t\tAmount = new NSDecimalNumber (\"0.90\"),\n\t\t\t\t\tLabel = @\"Judo Burrito\"\n\n\t\t\t\t},\n\t\t\t\tnew PKPaymentSummaryItem () {\n\t\t\t\t\tAmount = new NSDecimalNumber (\"0.10\"),\n\t\t\t\t\tLabel = @\"Extra Guac\"\n\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tvar applePayViewModel = new ApplePayViewModel {\n\t\t\t\t\n\t\t\t\tCurrencyCode = new NSString (\"GBP\"),\n\t\t\t\tCountryCode = new NSString (@\"GB\"),\n\t\t\t\tSupportedNetworks = new NSString[3]{ new NSString (\"Visa\"),\n\t\t\t\tnew NSString (\"MasterCard\"), new NSString (\"Amex\") },\n\t\t\t\tSummaryItems = summaryItems,\n\t\t\t\tTotalSummaryItem = new PKPaymentSummaryItem () {\n\t\t\t\t\tAmount = new NSDecimalNumber (\"1.00\"),//total of the previous items\n\t\t\t\t\tLabel = @\"El Judorito\" // who the transaction is made out to pay\n\n\t\t\t\t},\n\t\t\t\tConsumerRef=new NSString (@\"GenerateYourOwnCustomerRefHere\"),\n\t\t\t\tMerchantIdentifier = new NSString (\"INSERT_MERCHANT_ID_HERE\")\n\n\t\t\t};\n\nJudo.Instance.MakeApplePayment (applePayViewModel payment, SuccessCallback success, FailureCallback failure, UINavigationController navigationController)\n\n```\n\n#### PreAuthorise\nApplePay\n```\nJudo.Instance.MakeApplePreAuth (applePayViewModel payment, SuccessCallback success, FailureCallback failure, UINavigationController navigationController)\n```\n\n\n# Customizing the judoPay UI\n\n####Android\nYou can customise our out of the box implementation to match the colour tones, themes and wording of your platform. To customise your themes, you can use the sample custom style sheet below: \n**Android.Xamarin.SampleApp \u003e values \u003e mystyles.xml**\n\n```xml\n\u003c?xml version=\"1.0\" encoding=\"utf-8\" ?\u003e\n\n\u003cresources\u003e\n  \u003cstyle name=\"judo_payments_page\"\u003e\n    \u003citem name=\"android:layout_width\"\u003ematch_parent\u003c/item\u003e\n    \u003citem name=\"android:layout_height\"\u003ematch_parent\u003c/item\u003e\n    \u003citem name=\"android:paddingLeft\"\u003e@dimen/activity_horizontal_margin\u003c/item\u003e\n    \u003citem name=\"android:paddingRight\"\u003e@dimen/activity_horizontal_margin\u003c/item\u003e\n    \u003citem name=\"android:paddingTop\"\u003e@dimen/activity_vertical_margin\u003c/item\u003e\n    \u003citem name=\"android:paddingBottom\"\u003e@dimen/activity_vertical_margin\u003c/item\u003e\n    \u003citem name=\"android:orientation\"\u003evertical\u003c/item\u003e\n    \u003citem name=\"android:background\"\u003e@color/page_bg\u003c/item\u003e\n    \u003citem name=\"android:gravity\"\u003ecenter_vertical\u003c/item\u003e\n  \u003c/style\u003e\n\n\t// ....\n```\n\nYou can also customize the messages you present to your user by updating following file:\n**Android.Xamarin.SampleApp \u003e values \u003e Strings.xml**\n\n```xml\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cresources\u003e\n    \u003cstring name=\"Hello\"\u003eHello World, Click Me!\u003c/string\u003e\n    \u003cstring name=\"ApplicationName\"\u003eAndroid.Xamarin.SampleApp\u003c/string\u003e\n  \n    \u003cstring name=\"app_name\"\u003ejudoPay-Xamarin Sample\u003c/string\u003e\n    \u003cstring name=\"app_name_ui\"\u003ejudoPay-Xamarin Sample With UI\u003c/string\u003e\n\n    \u003c!-- messages --\u003e\n    \u003cstring name=\"msg_payment_ok\"\u003ePayment successful: %1$s\u003c/string\u003e\n    \u003cstring name=\"msg_preauth_ok\"\u003ePreAuth successful: %1$s\u003c/string\u003e\n\n    // ....\n```\n\n\n# Build your own UI\n\nAlternatively, if you want full control over your UI, you can create your own UI for your user to enter their card details. To process payments from your own UI, gather the data your UI provides into a CardViewModel,\nset  Judo.UIMode = false and make calls as your would before.\n\n### Judo Non UI Mode\n\n```csharp\n Judo.UIMode = true;\n\nvar cardViewModel =new CardViewModel(){ CardNumber = cardNumber, CV2 = cv2, ExpireDate = expiryDate, PostCode = addressPostCode, CountryCode = ISO3166CountryCodes.UK}\n\nvar paymentViewModel = new PaymentViewModel\n            {\n                Amount = 4.5m, \n                ConsumerReference = consumerRef,\n                PaymentReference = paymentReference,\n                Currency = \"GBP\",\n                // Non-UI API needs to pass card detail\n                Card =cardViewModel\n            };\n///iOS\n Judo.Instance.Payment(paymentViewModel, successCallback, failureCallback);\n \n ///Android\n Judo.Instance.Payment(paymentViewModel, successCallback, failureCallback,context);               \n \n// your code ...\n```\n\n\nImplementing a custom UI can alter your compliancy requirements, so if you\u0027re looking to implement a custom UI, let us know so we can help with the process.\n\n\n# Environments\n\nWe have two environments available to you for processing payments:\n\n### Sandbox\nOur sandbox environment allows you to process test transactions while developing your app. Please note only sandbox API tokens and test cards will work in the sandbox environment. Test card details are available in your judo dashboard.\n\n### Production\nOnce you\u0027re ready to go live, you can switch to our production environment. Please  note you\u0027ll need to change your API token and API secret for a Live token and secret. Only real payment cards will work in this environment.\n\n### Issues\nFor a list of known issues in the current Xamarin Framework that could affect this component please see [Github](https://github.com/JudoPay/Judo-Xamarin)","Hash":"e622797748fe40dd5f3ac58e61504451","TargetPlatforms":["ios","android"],"TrialHash":null}