// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Xamarin.InAppPurchase;

namespace InAppPurchaseTest
{
	public partial class SettingsController : UIViewController
	{
		#region Private Variables
		private InAppPurchaseManager _purchaseManager;
		private UIStoryboard _Storyboard;
		#endregion

		#region Computed Properties
		/// <summary>
		/// Gets the purchase manager.
		/// </summary>
		/// <value>The purchase manager.</value>
		public InAppPurchaseManager PurchaseManager {
			get { return _purchaseManager; }
		}

		/// <summary>
		/// Gets the storyboard.
		/// </summary>
		/// <value>The storyboard.</value>
		public UIStoryboard Storyboard {
			get { return _Storyboard; }
		}
		#endregion 

		#region Constructors
		public SettingsController (IntPtr handle) : base (handle)
		{
		}
		#endregion 

		#region Private Methods
		/// <summary>
		/// Moves the master containing view out of the way of the keyboard.
		/// </summary>
		/// <param name="y">The y coordinate.</param>
		private void MoveView(float y) {

			// Move view out of the way of the keyboard
			//SpecialView.Frame = new RectangleF (SpecialView.Frame.Left, y, SpecialView.Frame.Width, SpecialView.Frame.Height);
		}
		#endregion

		#region Public Override Methods
		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			// Wireup switch
			ShuffleSwitch.On = PurchaseManager.ShuffleProductsOnPersistence;
			ShuffleSwitch.ValueChanged += (sender, e) => {
				// Read new value
				PurchaseManager.ShuffleProductsOnPersistence = ShuffleSwitch.On;
			};

			// Wireup amount to consume
			AddProduct.ShouldBeginEditing= delegate(UITextField field){
				//Placeholder
				UIView.BeginAnimations("keyboard");
				UIView.SetAnimationDuration(0.3f);
				MoveView(-170);
				UIView.CommitAnimations();
				return true;
			};
			AddProduct.ShouldReturn = delegate (UITextField field){
				field.ResignFirstResponder ();
				//this.View.EndEditing(true);
				UIView.BeginAnimations("keyboard");
				UIView.SetAnimationDuration(0.3f);
				MoveView(0);
				UIView.CommitAnimations();
				//field.Text holds the current value


				return true;
			};
			AddProduct.ShouldEndEditing= delegate (UITextField field){
				field.ResignFirstResponder();
				//this.View.EndEditing(true);
				UIView.BeginAnimations("keyboard");
				UIView.SetAnimationDuration(0.3f);
				MoveView(0);
				UIView.CommitAnimations();
				//field.Text holds the current value

				return true;
			};

			// Stop editing if the user touches the view
			ViewTouched.AddTarget (async delegate() {
				// Close the keyboard if displayed
				AddProduct.EndEditing(true);
			});

			// Wireup the add button
			AddButton.TouchUpInside += (sender, e) => {
				// Close the keyboard if displayed
				AddProduct.EndEditing(true);

				// Ask iTunes App Store to fetch the product's details
				if (AddProduct.Text!="") {
					PurchaseManager.QueryInventory(AddProduct.Text);

					// Clear
					AddProduct.Text="";
				}
			};

			// Adjust GUI if we are running against the real iTunes App Store
			if (!PurchaseManager.SimulateiTunesAppStore) {
				// Hide the simulation interface
				AddLabel.Hidden = true;
				AddProduct.Hidden = true;
				AddButton.Hidden = true;
				AddDescription.Hidden = true;
			}

			// Wireup reset button
			ResetButton.TouchUpInside += (caller, e) => {
				//Verify that the user really wants to erase all purchase information
				UIAlertView alert = new UIAlertView("WARNING!", "Do you really want to erase all purchase information for this user? This command cannot be undone!", null, "Cancel", "Erase");
				//Wireup events
				alert.CancelButtonIndex=0;
				alert.Clicked += (sender, buttonArgs) => {
					//Did the user verify termination?
					if (buttonArgs.ButtonIndex==1) {
						//Yes, nuke all information
						_purchaseManager.PurgeProducts();

						// Reload the interface with the requested products
						// Ask the iTunes App Store to return information about available In App Products for sale
						_purchaseManager.QueryInventory (new string[] { 
							"product.nonconsumable",
							"feature.nonconsumable",
							"feature.nonconsumable.fail",
							"gold.coins.consumable_x25",
							"gold.coins.consumable_x50",
							"gold.coins.consumable_x100",
							"newsletter.freesubscription",
							"magazine.subscription.duration1month",
							"antivirus.nonrenewingsubscription.duration6months",
							"antivirus.nonrenewingsubscription.duration1year",
							"product.nonconsumable.invalid",
							"content.nonconsumable.downloadable",
							"content.nonconsumable.downloadfail",
							"content.nonconsumable.downloadupdate"
						});
					}
				};

				//Display dialog
				alert.Show();
			};
		}

		/// <summary>
		/// Gets a value indicating whether this <see cref="InAppPurchaseTest.FeaturesController"/> disables automatic
		/// keyboard dismissal.
		/// </summary>
		/// <value><c>true</c> if disables automatic keyboard dismissal; otherwise, <c>false</c>.</value>
		public override bool DisablesAutomaticKeyboardDismissal {
			get {
				// Force this view controller to allow the keyboard to be dismissed.
				return false;
			}
		}
		#endregion

		#region Public Methods
		/// <summary>
		/// Attachs to purchase manager.
		/// </summary>
		/// <param name="purchaseManager">Purchase manager.</param>
		public void AttachToPurchaseManager(UIStoryboard Storyboard, InAppPurchaseManager purchaseManager) {

			// Save connection
			_Storyboard = Storyboard;
			_purchaseManager = purchaseManager;

		}
		#endregion
	}
}
